Pavel_Zmushko Home Task Questions

1.Объясните, что имеется в виду, когда говорится: Java-язык программирования и Java-платформа.
Java как язык это инструмент для написания программ и инструкций, которые выполняыются в среде называемой java-платформой.
 
2.Поясните, как связаны имя java-файла и классы, которые в этом файле объявляются.
Имя файла должно совпадать в именем класса объявленного в этом файле

3.Расшифруйте аббревиатуры JVM, JDK и JRE; покажите, где “они находятся” и что собой представляют.
JVM-Java Virtual Machine, JDK - java development kit, JRE - java runtime enviroment. Виртуальная машина Java "находится" на всех устройствах 
способных работать с Java. Задача виртуальной машины это преобразование java байткода в код понятный машине, JDK это набор инструментов для 
разработки которые инсталируются в систему на которой мы разрабатываем, в jdk входят такие инструменты как компилятор, 
дебагер, стандартные библиотеки и т.д. JRE служит для исполнения java кода, это что-то вроде портативной jvm.

4.Объясните, как скомпилировать и запустить приложение из командной строки, а также зачем в переменных среды окружения прописывать пути к установленному jdk.
На windows компиляция будет выглядеть так: -javac Example.java (переменная среды нужна для того что бы система знала где находится наш компилятор javac)
В результате выполнения данной команды в папке появится файл Example.class. Что бы запустить эту программу, нужно в командной строке написать 
команду -java Example

5.Перечислите атрибуты доступа, объясните их действие.
Атрибуты доступа указываеются перед объявлением классов, методов, полей. Бывают следующие атрибуты доступа public protected private и атрибут доступа по умолчанию.
По сути атрибуты доступа обозначают область видимости переменной, область из которой мы можем к ней обратиться. public  позволяет увидеть переменную
хоть из космоса (за пределами пакета), protected и default в пределах пакета, а private (самый строгий атрибут) в пределах класса либо метода.

6.Что такое пакеты в java-программе, что представляют собой пакеты на диске? Каково соглашение по именованию пакетов? Как создать пакет?
Пакет это одна из ступенек инкапсуляции, служит для ограничения зоны видимости некоторых переменных, классов и методов.
На диске пакет представляет из себя папку в которой содержатся классы. В название пакета некоторые компании включают инвертированное имя своего домена.
Так же имя пакета может быть установлено как путь в проекте к пакету. Пакет создаётся путем создания папки в директории проекта, затем все классы
находящиеся в этом пакете в качестве первой строки должны содержать название пакета в виде package example.mypackage.first;

7.Объясните, какие классы, интерфейсы, перечисления необходимо импортировать в вашу программу, как это сделать. Влияет ли импорт пакета на импорт классов и др., лежащего в подпакетах? Какой пакет в Java импортируется по умолчанию?
Что бы использовать методы сторонних классов в своём классе необходимо импортировать этот класс путем написания import example.package.className;
после указания имени пакета. Самый основной пакет который импортируется по умолчанию это java.lang он содержит стандартные методы которые необходимы для работы любой программы.
Импрорт пакетов или классов может понадобиться что бы использовать что-то не содержащееся в пакете java.lang, например для работы с вводом выводом, датой и т.д.
Если мы импортируем пакет то все находящиеся в нем классы и подпакеты так же импортируются.

8.Объясните различия между терминами “объект” и “ссылка на объект”.
Ссылка на объект это ссылка на область в памяти в которой находится объект, а объект в свою очередь это некоторая сущность которая содержит какие-то
данные.

9.Какие примитивные типы Java вы знаете, как создать переменные примитивных типов? Объясните процедуру, по которой переменные примитивных типов передаются в методы как параметры.
В java существует помоему 8 примитивных типов - int, short, long, byte, char, double, float, bool. Что бы создать переменную необходимо 
указать [тип][имя] int example; Что бы передать переменную в метод, необходимо в первую очередь убедиться что этот метод сможет её принять и обработать
в объявлении метода должно быть указано (в скобках после имени) то что он принимает такую переменную. Затем нужно вызвать метод по имени, и 
передать туда переменную в скобках, например 
int a = 4;
sqrt(a);

10.Каков размер примитивных типов, как размер примитивных типов зависит от разрядности платформы, что такое преобразование (приведение) типов и зачем оно необходимо? Какие примитивные типы не приводятся ни к какому другому типу.
int 
short 16 бит - что-то около 32000
long 64 бит - очень много)
byte 8 бит - числа от -128 до 127
char 16 бит
double - с удвоенной точностью по сравнению с float - 64 бит
float - 32 бит
bool - тут true or false
От разрядности платформы, размер примитивных типов не зависит. Приведение типов необходимо для выполнения различных операций с переменными, например для 
сложения либо деления, что бы присвоить ссылку на результат переменной, необходимо привести тип к типу переменной. Бывает явное и неявное приведение типов
в java мы можем явно выполнить приведение к типу с помощью указания в скобках этого типа - int a = (int) 10.0;
К другому типу не приводится boolean
/------------------------------------------------------------------------------------------------------------------

11.Объясните, что такое явное и неявное приведение типов, приведите примеры, когда такое преобразование имеет место.
Когда мы переменную одного типа пытаемся запихнуть в переменную другого типа. Например:
int a = 5;   long b = a;  в данном случае "а" неявно приводится к long типу. Можем это сделать явно - long b = (long) a;


12.Что такое литералы в Java-программе, какую классификацию литералов вы знаете, как записываются литералы различных видов и типов в Java-программе?
Литералы это те значения (строки, символы, числа, и т.д.) которые мы пишем в коде. Литералы бывают строковые, численные, с плавающей точкой, логические.
Строковые литералы записываются в ковычках "" string a = "Hello";, числовые литералы записываются без чего либо ещё int a = 5;, символьные литералы 
в одинарных ковычках char a = 'c';

13.Как осуществляется работа с типами при вычислении арифметически выражений в Java?
Значение выражения приводится к общему типу. 

14.Что такое классы-оболочки, для чего они предназначены? Объясните, что значит: объект класса оболочки – константный объект.
Классы оболочки это аналоги примитивных типов в виде объектов. Возможность представить примитивы в виде объекта позволяет использовать нам
дополнительный функционал для обработки значений. У каждого примитива есть аналог в классе оболочке. Их названия схожи с названиями примитивов.
Название классов оболочек пишется с большой буквы: Integer, Boolean, Long, Short, Float, Double, Byte, Character.
Мы можем присваивать экземпляру класса оболочки значение примитива, в этом случае автоматически выполнится приведение типов.
Объект класса оболочки - константный объект потому что этот объект хранит ссылку на примитив который объявлен как final. И если мы хотим 
установить для класса оболочки другое значение, то мы не изменяем значение примитива в памяти, мы просто создаем новый объект класса
оболочки и меняем ссылку. Значение в памяти на которое больше нет ссылки будет удалено сборщиком мусора.

15.Объясните разницу между примитивными и ссылочными типами данных. Поясните существующие различия, при передаче параметров примитивных и ссылочных типов в методы. Объясните, как константные объекты ведут себя при передаче в метод.
Примитивный тип данных хранит своё значение, в то время как ссылочный тип хранит ссылку на ячейку в памяти в которой хранится объект.
При передаче примитивного типа в метод мы передаём его скопированное значение, сам примитивный тип при этом не изменяется, а в методе появляется
его точная копия с которой происходят манипуляции. При передаче ссылочного типа, мы передаём копию ссылки на объект в метод, где эта ссылка присваивается
ссылочной переменной. Константные объекты так же передают в метод свою ссылку.

16.Поясните, что такое автоупаковка и автораспаковка.
Автоматическое "приведение" примитивных типов к их объектным аналогам (обёрткам) пример: int b = 5; Integer a = b;
  
17.Перечислите известные вам арифметические, логические и битовые операторы, определите случаи их употребления. Что такое приоритет оператора, как определить, в какой последовательности будут выполняться операции в выражении, если несколько из них имеют одинаковый приоритет.
Арифметические :  +  сложение чисел, строк
- вычитание
* умножение
/ деление (если делить два числа типа int вернёт результат от целочисленного деления без остатка)
% остаток от деления
 ++  --  инкремент и декремент (увеличивает число на 1 либо уменьшает)
 Логические (используются для проверки каких либо условий) : || логическое или , возвращает true если хотя бы одно утверждение true
 && логическое "и" - возвращает true когда оба выражения true 
 ! логическое "НЕ" - интерполирует значение boolean значение
 > >= < <= ==  - стандартные логические опраторы сравнения: больше, больше равно, меньше, меньше равно, сравнение.
 битовые операторы (используются для побитовых операций над числами)
 & - битовое "и" - возвращает 1 если оба разряда равны 1
 | - битовое "или" - возвращает 1 если один из операторов равен 1
 ^  - "исключающее или" - возвращает 1 если только 1 разряд равен 1
 << >> - битовый сдвиг влево и вправо (если двоичное представление десятиричного числа сдвинуть побитово влево это будет равносильно умножению на 2)
 если право - делению.
 
18.Укажите правила выполнения операций с плавающий точкой в Java (согласно стандарту IEEE754). Как определить, что результатом вычисления стала бесконечность или нечисло?
В java числа с плавающей точкой, в двоичной системе представлены в виде знака, мантисы и экспоненты. Что бы определить что результат не число либо бесконечность можно попробовать его 
распечатать через System.out.println(); Если это не число напечатается NaN если бесконечность - infinity

19.Что такое статический импорт, какие элементы можно импортировать при статическом импорте.
Статически импорт это импорт статических методов класса для того что бы их можно было использовать без указания имени класса. 
Статический импорт делается там же где и обычный, перед ключевым словом import необходимо указать ключевое слово static
static import example.foo;

20.Объясните работу операторов if, switch, while, do-while, for, for-each. Напишите корректные примеры работы этих операторов.
Это все логические операторы, некоторые из которых управляют циклами.

if(a >5) { если условие true } else { если условие false}
------------------------------------
switch(a){ // переключатель который сравнивает значение "а" со всеми case, пока не встретит слово break;
case 1: если а = 1
break;
case 2: если а = 2
break;
default:
если а не равно 1 или 2
break;
}
----------------------------------------------
int a =0;
while(a <5){ a++; }  - цикл который исполняется пока значение выражения true, в данном случае выполнится 5 раз.
---------------------------------------------------------------
a = 6;
do{
Тот же while, только этот сперва делает первую итерацию, а затем проверяет значение выражения в условии
Хотя бы одна итерация будет выполнена даже если выражение изначально ложно.
}while(a<5);
------------------------------------------------------------------
for(int i =0;i<5;i++){
Цикл, в теле которого изначально определяется управляющий оператор "i", проверяется значение выражения, и производится действие с оператором
цикл будет исполняться до тех пор пока значение выражения i<5 = true
}
--------------------------------------------------------------------------
for-each - это умный for который помогает нам с массивами, коллекциями и т.д. (теми объектами у которых возможно получить итератор)
int[] a = {1,2,3,4,5,6}
for(int i: a) // цикл будет перебирать все ячейки массива, и записывать их в переменную i
System.out.print(i) - выдаст нам  123456

21.Объясните работу оператора instanceof. Что будет результатом работы оператора, если слева от него будет стоять ссылка, равная null?
Данный оператор проверяет принадлежность объекта в левой части к классу в правой. Возвращает true or false. Если ссылка будет равняться null
результат будет false