1.Как создать объект класса String, какие конструкторы класса String вы знаете? Что такое строковый литерал? Объясните, что значит “упрощенное создание объекта String”?
Объект класса String можно создать путем присвоения ссылке типа String строкового литерала (символьная строка которую мы пишем прямо в коде),
так же можно создать через различные конструкторы класса. Есть например конструкторы которые принимают массив символо ( char[]) 
и создают из них строку, так же есть конструктор который принимает массив byte[], так же можно создать пустую строку, если в конструктор
ничего не передавать. Упрощенное создание объекта String это когда ссылочной переменной типа String сразу присваивается литерал.

2.Можно ли изменить состояние объекта типа String? Что происходит при попытке изменения состояния объекта типа String? Можно ли наследоваться от класса String? Как вы думаете, почему строковые объекты immutable?
Состояние объекста String изменить нельзя, при попытке изменить этот объект мы будем получать новый объект.
Наследоваться от String так же нельзя, изначально класс определен как final. Возможно строковые объекты immutable в целях потокобезопасности и экономии памяти.

3.Объясните, что такое кодировка? Какие кодировки вы знаете? Как создать строки в различной кодировке?
Кодировка это список заранее оговоренных числовых представлений символьных литералов. Каждой букве, цифре, символу соответствует 
их числовое представление которое в конечном итоге шифруется в двоичный код. Сущестуют кодировки ASCII, utf-8, utf-16, unikod. Название необходимой кодировки можно передавать в конструктор при создании строки.

4.Что такое пул литералов? Как строки заносятся в пул литералов? Как занести строку в пул литералов и как получить ссылку на строку, хранящуюся в пуле литералов? Где хранится(в каком типе памяти) пул литералов в Java 1.6 и Java 1.7?
Пул литералов это подборка всех использующихся литералов в коде. В пуле содержатся только уникальные литералы.
Когда вы впервые присваиваете литерал спеременной то данный литерал попадает в пул литералов, и в следующий раз когда вы будете
присваивать такой же литерал другой переменной то эти две переменные будут ссылаться на один и тот же объект. 
Пул литералов хранится в Java Heap и это аналогично в 1.6 и 1.7 версиях.

5.В чем отличие объектов классов StringBuilder и StringBuffer от объектов класса String? Какой из этих классов потокобезопасный? Как необходимо сравнивать на равенство объекты классов StringBuilder и StringBuffer и почему?
Объекты данных классов в отличие от String являются изменяемыми. StringBuffer является потокобезопасным за счет синхронизации.
Что бы сравнить два объекта классов StringBuilder или StringBuffer нужно один из них привести к строке и потом использовать 
метод .equals(), это происходит потому что у данных классов не переопределен метод equals

6.Что такое Unicode?
Стандарт кодирования символов. Совместив с ASCII 

7.Какие методы класса String используются для работы с кодовыми точками? Как вы думаете, когда следует их использовать?
Code point можно передавать в коснтруктор String, так же в классе определены различные методы для работы с кодовыми точками:
codePointAt, codePointBefore, codePointCount и другие. Code point используются для для отображения символов по их кодировкам,
например что бы отобразить символ которого нет на стандартной клавиатуре

Regular Expressions----------------------------------------


1.Расскажите, что представляет собой регулярное выражение? 
Что такое метасимволы регулярного выражения? 
Какие вы знаете классы символов регулярных выражений? 
Что такое квантификаторы? 
Какие логические операторы регулярных выражений вы знаете? 
Что значит “якорь” для регулярного выражения?

Регулярное выражение это последовательность символов которая помогает задать шаблон строки либо осуществлять поиск с использованием данного шаблона.
Метасимволы - это символы использующиеся при составлении регулярных выражений, которые имеют определённое значение отличное от традиционного.
Классы символов - \d - числа, \w - символы (буквы + цифры)  \s - пробелы
Квантификаторы (?, *, +) указывают на количество повторов, используются совместно с метасимволами. 
Логические операторы - '^'- нет, '|'  - или

2.Какие java-классы работают с регулярными выражениями? В каком пакете они расположены? Приведите пример анализа текста с помощью регулярного выражения и поясните код примера.
java.util.regex.Pattern , Matcher. 

Matcher matcher = Pattern.compile("\\d").matcher("fdsfd3sgdfs5dsgfe8s"); // создаем объект Pattern с патерном \\d (цифры 0-9) вызываем у него метод matcher 
в который передаём анализируемую строку. Данный метод возвращает объект Matcher. 
		while(matcher.find()){// т.к. в процессе анализа строки матчер делает это поэтапно и что бы получить все элементы удовлетворяющие
		паттерну, мы должны вызывать метод find(), а затем получать элемент с помощью метода group()
		System.out.println(matcher.group()); // Печатаем эти элементы
		}

		
3.Что такое группы в регулярных выражениях? 
Как нумеруются группы? 
Что представляет собой группа номер 0(ноль)? 
Приведите пример с использованием групп регулярного выражения.

Группы представляют собой несколько регулярных выражений, каждое из которых заключено в круглые скобки.
Нумерация групп идёт с нуля, группа номер 0 это то же регулярное выражение которое содержится во всех группах не разделённое на группы.

		String input = "java8"; // определяем анализируемую строку
		String regex = "([a-z]*)([0-9]*)"; // определяем паттерны по группам, в данном случае группа 1 ищет все буквы a-z, а группа 2 - цифры
		Pattern pattern = Pattern.compile(regex); // создаем объект типа Pattern
		Matcher matcher = pattern.matcher(input); // Создаем Matcher  и задаем анализируемую строку
		if(matcher.matches()) { // если есть совпадения с паттерном
			System.out.println("main group: " + matcher.group(0));// печатаем результаты по группам
			System.out.println("group 1: " + matcher.group(1));
			System.out.println("group 2: " + matcher.group(2));
		}
		else {
			System.out.println("nothing");
		}
